// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   //Zero x
	Mux16(a[0..15]=x, b[0..15]=false, sel=zx, out[0..15]=zerox);
	//Zero y
	Mux16(a[0..15]=y, b[0..15]=false, sel=zy, out[0..15]=zeroy);
	
	//Negate x
	Not16(in[0..15]=zerox, out[0..15]=negX);
	//Negate y
	Not16(in[0..15]=zeroy, out[0..15]=negY);
	
	  //choose if x should be negated
	Mux16(a[0..15]=zerox, b[0..15]=negX, sel=nx, out[0..15]=negatedx);
	//choose if y should be negated
	Mux16(a[0..15]=zeroy, b[0..15]=negY, sel=ny, out[0..15]=negatedy);
	
	//x + y
	Add16(a[0..15]=negatedx, b[0..15]=negatedy, out[0..15]=plus);
	//x & y
	And16(a[0..15]=negatedx, b[0..15]=negatedy, out[0..15]=and);
	
	//f
	Mux16(a[0..15]=and, b[0..15]=plus, sel=f, out[0..15]=fout);
	
	//(no == 1) set out = !out 
	Not16(in[0..15]=fout, out[0..15]=negfout);
	
	//choose fout
	Mux16(a[0..15]=fout, b[0..15]=negfout, sel=no, out[0..15]=out, out[15]=ng, out[0..7]=zeroout1, out[8..15]=zeroout2);
	
	//status
	Or8Way(in[0..7]=zeroout1, out=negZr1);
	Or8Way(in[0..7]=zeroout2, out=negZr2);
	Or(a=negZr1, b=negZr2, out=negZr);
	Not(in=negZr, out=zr);
	
}

