// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
	static int kLoc;
    /** Initializes the keyboard. */
    function void init() {
    let kLoc = 24576;
    return;
    } 

    /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, as well as the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
    return kLoc[0]; //point to the keyboard location in memory and return the value found there
    }

    /**								
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
    function char readChar() {
	    var char key;
	    let key = Keyboard.keyPressed();
	    while (key=0){
	    	let key = Keyboard.keyPressed();
	    }
	    while (~(Keyboard.keyPressed()=0)){ //wait until released
	    }
	    do Output.printChar(key);
	    return key; //return it as soon as non zero
    }

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its value.
     */
    function String readLine(String message) {
    var String input;
    var char curChar;
    let input = String.new(200);
    do Output.printString(message);
    while (~(curChar=128)) //keep going until newline
    {
    	let curChar = Keyboard.readChar();
    	if (curChar = 128){ //return
    		return input;
    	}
    	
	    if (curChar = 129){ //backspace, scratch the last character
	    	do input.eraseLastChar();
	    }
	    else 
	    {
	    	do input.appendChar(curChar);
	    }
    }
    return input;
    }   

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its
     * integer value (until the first non numeric character).
     */
    function int readInt(String message) {
    return 0;
    }
}
